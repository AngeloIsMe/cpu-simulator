#!/usr/bin/env python3

REGISTER_COUNT = 8
INSTRUCTION_COUNT = 14

def zeroext(imm, size):
    assert size is not None
    return imm

def signext(imm, size):
    assert size is not None
    sign = imm & (1 << (size-1))
    if sign:
        return imm | ((0xFFFF << size) & 0xFFFF)
    else:
        return imm

def tv_print(inst, op, rd=None, rs=None, rt=None, funct=None, imm=None):
    instr = '0x{:X}'.format(inst)
    opstr = '0x{:X}'.format(op)
    fustr = '0x{:X}'.format(funct) if funct is not None else 'xxx'
    rdstr = '0x{:X}'.format(rd) if rd is not None else 'xxx'
    rsstr = '0x{:X}'.format(rs) if rs is not None else 'xxx'
    rtstr = '0x{:X}'.format(rt) if rt is not None else 'xxx'
    imstr = '0x{:X}'.format(imm) if imm is not None else ('x'*16)
    print(f'{instr} {opstr} {fustr} {rdstr} {rsstr} {rtstr} {imstr}')

def tv_rtype(op):
    for rd in range(0, REGISTER_COUNT):
        for rs in range(0, REGISTER_COUNT):
            for rt in range(0, REGISTER_COUNT):
                for funct in range(0, 8):
                    iop = 0
                    iop |= (funct & 7) << 0
                    iop |= (rt & 7) << 3
                    iop |= (rs & 7) << 6
                    iop |= (rd & 7) << 9
                    iop |= (op & 15) << 12
                    tv_print(iop, op, rd=rd, rs=rs, rt=rt, funct=funct)

def tv_lui(op):
    samples = [0b0, 0b1, 0b1111111111, 0b0101101001] # 10 bits
    for imm in samples:
        iop = 0
        iop |= imm
        iop |= (op & 15) << 12
        tv_print(iop, op, imm=zeroext(imm, 10))

def tv_j(op):
    samples = [0b0, 0b1, 0b1111111111, 0b0101101001] # 10 bits
    for imm in samples:
        for rd in range(0, 3+1):
            iop = 0
            iop |= imm
            iop |= (rd & 3) << 10   # RD is different on J
            iop |= (op & 15) << 12
            tv_print(iop, op, rd=rd, imm=zeroext(imm, 10))

def tv_itype(op, extender):
    samples = [0b0, 0b1, 0b111111, 0b011001] # 6 bits
    for imm in samples:
        for rd in range(0, REGISTER_COUNT):
            for rs in range(0, REGISTER_COUNT):
                iop = 0
                iop |= imm
                iop |= (rs & 7) << 6
                iop |= (rd & 7) << 9
                iop |= (op & 15) << 12
                tv_print(iop, op, rd=rd, rs=rs, imm=extender(imm, 6))

def tv_itype_signed(op):
    return tv_itype(op, extender=signext)

def tv_itype_unsigned(op):
    return tv_itype(op, extender=zeroext)

def tv_mf(op):
    for rd in range(0, REGISTER_COUNT):
        iop = 0
        iop |= (rd & 7) << 9
        iop |= (op & 15) << 12
        tv_print(iop, op, rd=rd)

def tv_none(op):
    pass

TV_GENERATORS = [
    tv_rtype,          # 0 SLL, SRL, ADD, AND, OR, XOR, SLT, MULT
    tv_lui,            # 1 LUI
    tv_j,              # 2 J
    tv_itype_signed,   # 3 JR
    tv_itype_signed,   # 4 BEQ
    tv_itype_signed,   # 5 BNE
    tv_itype_signed,   # 6 ADDI
    tv_itype_signed,   # 7 SLTI
    tv_itype_unsigned, # 8 ANDI
    tv_itype_unsigned, # 9 ORI
    tv_itype_signed,   # A LH
    tv_itype_signed,   # B SH
    tv_mf,             # C MFHI
    tv_mf,             # D MFLO
    tv_none,           # E
    tv_none,           # F
]

if __name__ == "__main__":
    import os
    print("# Do not edit, automatically generated by " + os.path.basename(__file__))
    print("Instr[16] Opcode[4] Funct[3] rd[3] rs[3] rt[3] Imm16[16]")
    for op in range(0, INSTRUCTION_COUNT):
        TV_GENERATORS[op](op)

